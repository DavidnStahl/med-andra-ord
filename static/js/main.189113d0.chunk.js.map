{"version":3,"sources":["Components/Home.js","Contexts/GameSettingsContext.js","Contexts/ScoresContext.js","Components/GameSettings.js","Contexts/LoadingScreenContext.js","Contexts/WordsContext.js","Contexts/GameViewContext.js","Components/Timer.js","Components/LoadingScreen.js","Components/ResultBoard.js","Components/WordPanel.js","Components/Game.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Home","history","useHistory","Fragment","Button","variant","color","onClick","push","GameSettingsContext","createContext","GameSettingsContextProvider","props","useState","noOfTeams","setNoOfTeams","noOfRounds","setNoOfRounds","noOfSecondsPerRound","setNoOfSecondsPerRound","progressValue","setProgressValue","count","setCount","currentTeam","setCurrentTeam","turnOrder","setTurnOrder","currentRound","setCurrentRound","Provider","value","children","ScoresContext","ScoresContextProvider","score","setScore","scoreByTeam","setScoreByTeam","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","slider","height","width","typo","marginBottom","timeMarks","label","GameSettings","useEffect","classes","FormControl","className","InputLabel","id","Select","labelId","onChange","event","target","scoreByTeamArray","index","team","console","log","MenuItem","Typography","gutterBottom","Slider","defaultValue","step","valueLabelDisplay","marks","setNoOfSecondsPerTurn","getAriaValueText","aria-labelledby","LoadingScreenContext","LoadingScreenContextProvider","LoadingprogressValue","setLoadingProgressValue","Loadingcounter","setLoadingcounter","WordsContext","data","WordsContextProvider","word","setWord","wordList","setWordList","getWords","max","wordIndex","length","Math","floor","random","processedWord","JSON","stringify","wordsArray","splice","GameViewContext","GameViewContextProvider","showTimer","setShowTimer","Timer","time","interval","setInterval","clearInterval","timeOut","getNewProgressValue","LinearProgress","LoadingScreen","nextTeam","setShowNextTeam","setShowWords","ResultBoard","listItems","map","item","key","getTeamStanding","nextRound","RightAnwserButton","styled","background","border","borderRadius","boxShadow","padding","NextButton","WordPanel","useContext","wordProcessed","handleProcessedWord","updateScore","nextTurn","noOfSecondsPerTurn","Game","showWords","showNextTeam","showResult","setShowResult","currentScore","newScoreByTeam","newScore","initialTeamScore","Main","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.189113d0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\n\nconst Home = () => {\n  const history = useHistory();\n\n  return (\n    <React.Fragment>\n      <h2>Välkommen till Med Andra Ord!</h2>\n      <Button\n        variant=\"contained\"\n        color=\"#4f5b66\"\n        onClick={() => {\n          history.push(\"/GameSettings\");\n        }}\n      >\n        Börja spela\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React, { createContext, useState, useEffect } from 'react';\n\nexport const GameSettingsContext = createContext();\n\n\nconst GameSettingsContextProvider = (props) => {\n  const [noOfTeams, setNoOfTeams] = useState('2');\n  const [noOfRounds, setNoOfRounds] = useState('10');\n  const [noOfSecondsPerRound, setNoOfSecondsPerRound] = useState(20);\n  const [progressValue, setProgressValue] = useState(0);\n  const [count, setCount] = useState(noOfSecondsPerRound);\n  const [currentTeam, setCurrentTeam] = useState(1);\n  const [turnOrder, setTurnOrder] = useState([1, 2]);\n  const [currentRound, setCurrentRound] = useState(1);\n\n\n\n  return (\n\n    <GameSettingsContext.Provider value={[noOfTeams, setNoOfTeams, noOfRounds, setNoOfRounds, noOfSecondsPerRound, setNoOfSecondsPerRound, count, setCount, progressValue, setProgressValue, currentTeam, setCurrentTeam, turnOrder, setTurnOrder, currentRound, setCurrentRound]}>\n      {props.children}\n    </GameSettingsContext.Provider>\n  )\n}\n\nexport default GameSettingsContextProvider","import React, { createContext, useState, useEffect } from 'react';\n\nexport const ScoresContext = createContext();\n\n\nconst ScoresContextProvider = (props) => {\n  const [score, setScore] = useState(0);\n  const [totalScore, setTotalScore] = useState({});\n  const [scoreByTeam, setScoreByTeam] = useState([\n    {\n      \"team\": 1,\n      \"score\": 0\n    },\n    {\n      \"team\": 2,\n      \"score\": 0\n    }\n  ]);\n\n\n\n  return (\n    <ScoresContext.Provider value={[score, setScore, scoreByTeam, setScoreByTeam]}>\n      {props.children}\n    </ScoresContext.Provider>\n  )\n}\n\nexport default ScoresContextProvider","import React, { useContext, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, FormControl, MenuItem, InputLabel, Select, Typography, Slider } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\nimport { GameSettingsContext } from \"../Contexts/GameSettingsContext\";\nimport { ScoresContext } from \"../Contexts/ScoresContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(3),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  slider: {\n    height: theme.spacing(3),\n    width: 600,\n  },\n  typo: {\n    margin: theme.spacing(3),\n    marginBottom: theme.spacing(6),\n  },\n}));\n\nconst timeMarks = [\n  {\n    value: 10,\n    label: \"10\",\n  },\n  {\n    value: 20,\n    label: \"20\",\n  },\n  {\n    value: 30,\n    label: \"30\",\n  },\n  {\n    value: 40,\n    label: \"40\",\n  },\n  {\n    value: 50,\n    label: \"50\",\n  },\n  {\n    value: 60,\n    label: \"60\",\n  },\n];\n\nconst GameSettings = (props) => {\n  const history = useHistory();\n\n  useEffect(() => {}, []);\n  const classes = useStyles();\n\n  const handleNoOfTeamsChange = (event) => {\n    props.setNoOfTeams(event.target.value);\n\n    let turnOrder = [];\n    let scoreByTeamArray = [];\n\n    for (let index = 1; index <= props.noOfTeams; index++) {\n      turnOrder.push(index);\n\n      scoreByTeamArray.push({\n        team: index,\n        score: 0,\n      });\n    }\n    console.log(\"scoreByTeamArray: \", scoreByTeamArray);\n    props.setScoreByTeam(scoreByTeamArray);\n    console.log(\"nofOfTeams = \", props.noOfTeams);\n    console.log(\"turnOrder = \", turnOrder);\n  };\n\n  const handleNoOfRoundsChange = (event) => {\n    console.log(event.target.value);\n    props.setNoOfRounds(event.target.value);\n  };\n\n  const handleNoOfSecondsPerRoundChange = (event, value) => {\n    console.log(value);\n    props.setNoOfSecondsPerTurn(value);\n  };\n\n  const getValueText = (value) => {\n    return `${value} sekunder`;\n  };\n\n  return (\n    <React.Fragment>\n      <h2>Välj spelformat</h2>\n      <Button\n        variant=\"contained\"\n        color=\"#4f5b66\"\n        onClick={() => {\n          history.push(\"/GameView\");\n        }}\n      >\n        Starta spel\n      </Button>\n      <br />\n      <br />\n      <Button\n        variant=\"outlined\"\n        color=\"#4f5b66\"\n        onClick={() => {\n          history.push(\"/\");\n        }}\n      >\n        Gå tillbaka till start\n      </Button>\n      <br />\n\n      <FormControl variant=\"filled\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-filled-label\">Antal lag</InputLabel>\n        <Select labelId=\"demo-simple-select-filled-label\" id=\"demo-simple-select-filled\" value={props.noOfTeams} onChange={handleNoOfTeamsChange}>\n          <MenuItem value={2}>\n            <em>2</em>\n          </MenuItem>\n          <MenuItem value={3}>3</MenuItem>\n          <MenuItem value={4}>4</MenuItem>\n          <MenuItem value={5}>5</MenuItem>\n          <MenuItem value={6}>6</MenuItem>\n          <MenuItem value={7}>7</MenuItem>\n          <MenuItem value={8}>8</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl variant=\"filled\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-filled-label\">Antal omgångar</InputLabel>\n        <Select labelId=\"demo-simple-select-filled-label\" id=\"demo-simple-select-filled\" value={props.noOfRounds} onChange={handleNoOfRoundsChange}>\n          <MenuItem value={10}>\n            <em>10</em>\n          </MenuItem>\n          <MenuItem value={20}>20</MenuItem>\n          <MenuItem value={30}>30</MenuItem>\n          <MenuItem value={40}>40</MenuItem>\n          <MenuItem value={50}>50</MenuItem>\n          <MenuItem value={60}>60</MenuItem>\n          <MenuItem value={70}>70</MenuItem>\n        </Select>\n      </FormControl>\n      <Typography id=\"discrete-slider-custom\" gutterBottom className={classes.typo}>\n        Tid per omgång (sekunder)\n      </Typography>\n      <Slider className={classes.slider} defaultValue={20} step={null} valueLabelDisplay=\"on\" marks={timeMarks} onChange={handleNoOfSecondsPerRoundChange} getAriaValueText={getValueText} aria-labelledby=\"discrete-slider-custom\" />\n    </React.Fragment>\n  );\n};\n\nexport default GameSettings;\n","import React, { createContext, useState } from 'react';\n\nexport const LoadingScreenContext = createContext();\n\n\nconst LoadingScreenContextProvider = (props) => {\n    const [LoadingprogressValue, setLoadingProgressValue] = useState(0);\n    const [Loadingcounter, setLoadingcounter] = useState(5);\n\n\n    return (\n\n        <LoadingScreenContext.Provider value={[LoadingprogressValue, setLoadingProgressValue, Loadingcounter, setLoadingcounter]}>\n            {props.children}\n        </LoadingScreenContext.Provider>\n    )\n}\n\nexport default LoadingScreenContextProvider","import React, { createContext, useState, useEffect } from 'react';\n//import axios from 'axios';\n//import fs from 'fs';\n\nexport const WordsContext = createContext();\n//const API = 'http://localhost:1337/words';\n\nconst data = [\n  {\n    \"word\": \"corona\"\n  },\n  {\n    \"word\": \"sally\"\n  },\n  {\n    \"word\": \"coronafall\"\n  },\n  {\n    \"word\": \"brother\"\n  },\n  {\n    \"word\": \"ciara\"\n  },\n  {\n    \"word\": \"världsrekord\"\n  },\n  {\n    \"word\": \"nanne\"\n  },\n  {\n    \"word\": \"sport-bloggen\"\n  },\n  {\n    \"word\": \"deltagaren\"\n  },\n  {\n    \"word\": \"världsrekordet\"\n  },\n  {\n    \"word\": \"arbetskraftsinvandring\"\n  },\n  {\n    \"word\": \"ferm\"\n  },\n  {\n    \"word\": \"elma\"\n  },\n  {\n    \"word\": \"skidskytte-vm\"\n  },\n  {\n    \"word\": \"efterfesten\"\n  },\n  {\n    \"word\": \"faith\"\n  },\n  {\n    \"word\": \"äventyr\"\n  },\n  {\n    \"word\": \"coronautbrottet\"\n  },\n  {\n    \"word\": \"kryssningsfartyget\"\n  },\n  {\n    \"word\": \"jämställda\"\n  },\n  {\n    \"word\": \"norgren\"\n  },\n  {\n    \"word\": \"t-centralen\"\n  },\n  {\n    \"word\": \"öfk\"\n  }\n];\n\n\n\nconst WordsContextProvider = (props) => {\n  const [word, setWord] = useState({\n    word: \"\",\n    index: 0\n  });\n  const [wordList, setWordList] = useState(data);\n\n  useEffect(() => {\n    getWords();\n  }, [])\n\n\n  const wordProcessed = (processedWord) => {\n    console.log(`processed word: ${JSON.stringify(processedWord)}`);\n    let wordsArray = wordList;\n    wordsArray.splice(processedWord.index, 1);\n    setWordList(wordsArray);\n    getWords();\n  }\n\n  const getWords = () => {\n    setWord(() => {\n      let wordIndex = getRandomInt(wordList.length);\n      let wordObj = {\n        word: wordList[wordIndex].word,\n        index: wordIndex\n      };\n      return wordObj;\n    })\n\n    function getRandomInt(max) {\n      return Math.floor(Math.random() * Math.floor(max));\n    }\n\n  }\n  return (\n    <WordsContext.Provider value={[word, setWord, getWords, wordProcessed]}>\n      {props.children}\n    </WordsContext.Provider>\n  )\n}\n\n\nexport default WordsContextProvider","import React, { createContext, useState } from 'react';\n\nexport const GameViewContext = createContext();\n\n\nconst GameViewContextProvider = (props) => {\n  const [progressValue, setProgressValue] = useState(1);\n  const [count, setcount] = useState();\n  const [showTimer, setShowTimer] = useState(false);\n\n\n  return (\n\n    <GameViewContext.Provider value={[showTimer, setShowTimer]}>\n      {props.children}\n    </GameViewContext.Provider>\n  )\n}\n\nexport default GameViewContextProvider","import React, { Component, useState, useEffect, useContext } from \"react\";\nimport { Button, LinearProgress } from \"@material-ui/core\";\nimport GameViewContext from \"../Contexts/GameViewContext\";\n\nconst Timer = (props) => {\n  const [count, setCount] = useState(0);\n  const [progressValue, setProgressValue] = useState(0);\n\n  useEffect(() => {\n    setCount(props.time);\n    setProgressValue(50 / props.time);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(() => {\n        if (count > 0) {\n          return count - 1;\n        } else {\n          //TODO: Update state to hide component\n          clearInterval(interval);\n          props.timeOut();\n        }\n      });\n      setProgressValue(getNewProgressValue(count));\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [count, progressValue]);\n\n  const getNewProgressValue = (count) => {\n    if (count !== 0) {\n      return progressValue + 100 / props.time;\n    } else {\n      return 100;\n    }\n  };\n\n  return (\n    <div>\n      <h1>Tid: {count}</h1>\n      <LinearProgress variant=\"determinate\" value={progressValue} />\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { useEffect, useContext } from \"react\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { LoadingScreenContext } from \"../Contexts/LoadingScreenContext\";\nimport { ScoresContext } from \"../Contexts/ScoresContext\";\nimport { GameSettingsContext } from \"../Contexts/GameSettingsContext\";\nimport Timer from \"./Timer\";\n\nconst LoadingScreen = (props) => {\n  function timeOut() {\n    console.log(\"nextteamout\");\n    props.setShowNextTeam(false);\n    props.setShowWords(true);\n  }\n\n  return (\n    <div>\n      <h2>Näst på tur: Lag {props.nextTeam}</h2>\n      <h2>Nästa lag börjar om..</h2>\n      <Timer timeOut={timeOut} time={props.time} />\n    </div>\n  );\n};\nexport default LoadingScreen;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nconst ResultBoard = (props) => {\n  const getTeamStanding = () => {\n    let newTeamStanding = props.scoreByTeam;\n\n    const listItems = newTeamStanding.map((item) => (\n      <li key={item.team}>\n        Lag {item.team} - {item.score} poäng\n      </li>\n    ));\n\n    return <ul>{listItems}</ul>;\n  };\n\n  const sortByHighestScore = (a, b) => {\n    let comparison = 0;\n\n    if (a.score > b.score) {\n      comparison = 1;\n    } else if (a.score < b.score) {\n      comparison = -1;\n    }\n    return comparison;\n  };\n\n  function handleOnClick() {\n    props.nextRound();\n  }\n\n  return (\n    <React.Fragment>\n      <h2>Resultat för runda {props.currentRound}:</h2>\n      {getTeamStanding()}\n      <Button variant=\"contained\" color=\"primary\" onClick={handleOnClick}>\n        Börja Nästa Omgång\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport default ResultBoard;\n","import React, { useContext, useState } from \"react\";\nimport { Button, LinearProgress } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router\";\nimport { WordsContext } from \"../Contexts/WordsContext\";\nimport { ScoresContext } from \"../Contexts/ScoresContext\";\nimport { GameSettingsContext } from \"../Contexts/GameSettingsContext\";\nimport Timer from \"./Timer\";\n\nconst RightAnwserButton = styled(Button)({\n  background: \"  rgba(82,255,125,1)\",\n  border: 0,\n  borderRadius: 3,\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n  color: \"white\",\n  height: 48,\n  padding: \"0 30px\",\n});\n\nconst NextButton = styled(Button)({\n  background: \"rgba(255,157,82,1)\",\n  border: 0,\n  borderRadius: 3,\n  boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\n  color: \"white\",\n  height: 48,\n  padding: \"0 30px\",\n});\n\nconst WordPanel = (props) => {\n  const [score, setScore] = useState(0);\n  const [word, setWord, getWords, wordProcessed] = useContext(WordsContext);\n\n  function timeOut() {\n    props.updateScore(props.currentTeam, score);\n    props.nextTurn();\n    props.setShowWords(false);\n  }\n\n  const history = useHistory();\n\n  const handleProcessedWord = () => {\n    wordProcessed(word);\n    getWords();\n  };\n  return (\n    <React.Fragment>\n      <Timer timeOut={timeOut} time={props.noOfSecondsPerTurn} />\n      <br />\n      <h2>Lag {props.currentTeam}</h2>\n      <h1>Antal rätt: {score}</h1>\n\n      <h1>{word.word}</h1>\n      <br />\n      <RightAnwserButton\n        onClick={() => {\n          handleProcessedWord();\n          setScore(() => {\n            return score + 1;\n          });\n        }}\n      >\n        Rätt svar\n      </RightAnwserButton>\n      <br />\n      <br />\n      <NextButton onClick={() => handleProcessedWord()}>Nästa ord</NextButton>\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          history.push(\"/GameSettings\");\n        }}\n      >\n        Gå tillbaka till konfiguering\n      </Button>\n      <br />\n      <br />\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={() => history.push(\"/\")}\n      >\n        Gå tillbaka till start\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport default WordPanel;\n","import React, { useEffect, useState } from \"react\";\nimport Timer from \"./Timer\";\nimport WordPanel from \"./WordPanel\";\nimport LoadingScreen from \"./LoadingScreen\";\nimport ResultBoard from \"./ResultBoard\";\n\nfunction Game(props) {\n  const [showWords, setShowWords] = useState(true);\n  const [showNextTeam, setShowNextTeam] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const [currentRound, setCurrentRound] = useState(1);\n  const [currentTeam, setCurrentTeam] = useState(1);\n\n  function nextTurn() {\n    if (currentTeam < props.noOfTeams) {\n      setCurrentTeam(currentTeam + 1);\n      setShowNextTeam(true);\n    } else {\n      if (currentRound < props.noOfRounds) {\n        endOfRound();\n      } else {\n        console.log(\"end of game\");\n      }\n    }\n  }\n\n  function endOfRound() {\n    console.log(\"end of round\" + currentRound);\n    setShowResult(true);\n  }\n\n  function nextRound() {\n    console.log(\"next round clicked\");\n    setCurrentRound(currentRound + 1);\n    setCurrentTeam(1);\n    setShowResult(false);\n    setShowWords(true);\n  }\n\n  function updateScore(team, currentScore) {\n    const newScoreByTeam = props.scoreByTeam;\n    const oldScore = newScoreByTeam[team - 1].score;\n    const newScore = oldScore + currentScore;\n    newScoreByTeam[team - 1].score = newScore;\n\n    props.setScoreByTeam(newScoreByTeam);\n    console.log(\"new score by team = \", props.scoreByTeam);\n  }\n\n  function renderGame() {\n    if (showWords) {\n      return (\n        <div>\n          <WordPanel\n            noOfSecondsPerTurn={props.noOfSecondsPerTurn}\n            setShowWords={setShowWords}\n            nextTurn={nextTurn}\n            setScoreByTeam={props.setScoreByTeam}\n            currentTeam={currentTeam}\n            updateScore={updateScore}\n          />\n        </div>\n      );\n    } else if (showNextTeam) {\n      return (\n        <div>\n          <LoadingScreen\n            nextTeam={currentTeam}\n            time={5}\n            setShowWords={setShowWords}\n            setShowNextTeam={setShowNextTeam}\n          />\n        </div>\n      );\n    } else if (showResult) {\n      return (\n        <div>\n          Hello\n          <ResultBoard\n            nextRound={nextRound}\n            scoreByTeam={props.scoreByTeam}\n            currentRound={currentRound}\n          />\n        </div>\n      );\n    }\n  }\n\n  return <div>{renderGame()}</div>;\n}\n\nexport default Game;\n","import React, { useState } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport GameSettings from \"./GameSettings\";\nimport GameView from \"./GameView\";\nimport ResultBoard from \"./ResultBoard\";\nimport Game from \"./Game\";\n\nconst initialTeamScore = [\n  {\n    team: 1,\n    score: 0,\n  },\n  {\n    team: 2,\n    score: 0,\n  },\n];\n\nconst Main = () => {\n  const [noOfTeams, setNoOfTeams] = useState(2);\n  const [noOfRounds, setNoOfRounds] = useState(10);\n  const [noOfSecondsPerTurn, setNoOfSecondsPerTurn] = useState(5);\n  const [scoreByTeam, setScoreByTeam] = useState(initialTeamScore);\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route path=\"/GameSettings\">\n        <GameSettings\n          setNoOfSecondsPerTurn={setNoOfSecondsPerTurn}\n          setNoOfRounds={setNoOfRounds}\n          noOfRounds={noOfRounds}\n          noOfTeams={noOfTeams}\n          setNoOfTeams={setNoOfTeams}\n          setScoreByTeam={setScoreByTeam}\n        />\n      </Route>\n      <Route path=\"/GameView\">\n        <Game\n          noOfSecondsPerTurn={noOfSecondsPerTurn}\n          scoreByTeam={scoreByTeam}\n          setScoreByTeam={setScoreByTeam}\n          noOfRounds={noOfRounds}\n          noOfTeams={noOfTeams}\n        />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './Components/Main'\nimport GameSettingsContextProvider from './Contexts/GameSettingsContext';\nimport ScoresContextProvider from './Contexts/ScoresContext';\nimport WordsContextProvider from './Contexts/WordsContext';\nimport GameViewContextProvider from './Contexts/GameViewContext';\nimport LoadingScreenContextProvider from './Contexts/LoadingScreenContext';\nimport Timer from './Components/Timer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <GameSettingsContextProvider>\n        <ScoresContextProvider>\n          <WordsContextProvider>\n            <GameViewContextProvider>\n              <LoadingScreenContextProvider>\n                <Main />\n              </LoadingScreenContextProvider>\n            </GameViewContextProvider>\n          </WordsContextProvider>\n        </ScoresContextProvider>\n      </GameSettingsContextProvider>\n\n      {\n        /*\n        <ScoresContextProvider>\n        <GameViewContextProvider>\n          <Timer noOfSeconds={10} />\n        </GameViewContextProvider>\n      </ScoresContextProvider>\n      */\n      }\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}